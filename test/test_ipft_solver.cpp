#include <gtest/gtest.h>

#include <ipft/core/pomdp_world.hpp>
#include <ipft/util/util.hpp>
#include <limits>

#include "test_ipft_objects.hpp"

namespace ipft {
namespace test {

// The fixture for testing class Ipft.
class IpftSolverTest : public IpftObjects {
   protected:
    // You can remove any or all of the following functions if their bodies would
    // be empty.

    ParticleBelief* belErr1Step;
    ParticleBelief* belErr2Step;
    ParticleBelief* belErr3Initial;

    IpftSolverTest() {
        // You can do set-up work for each test here.

        //! run all these tests with CLD::createStartState() = -5.0
        this->model_ = new cld::ContLightDark(this->rand_);
        this->world_ = new POMDPWorld(model_);

        // belErr1Step
        std::vector<double> numbers = {9.3953,
                                       9.8427,
                                       10.1268,
                                       9.6946,
                                       9.2815,
                                       10.4726,
                                       10.7598,
                                       3.0242,  // this is an outlier
                                       10.6167,
                                       10.2247,
                                       9.0881,
                                       11.5099,
                                       9.6757,
                                       9.6167,
                                       8.9347,
                                       10.1384,
                                       9.6376,
                                       9.6736,
                                       10.7702,
                                       9.7005};

        std::vector<State*> states = debug::doubleVec2StateVec(numbers, this->model_);
        belErr1Step = new ParticleBelief(states, false, this->model_, this->rand_, new NoReinvigoration());

        // belErr2Step
        numbers = {-1.2199,
                   2.5795,
                   1.7870,
                   -1.1903,
                   -0.2870,
                   -4.4878,
                   2.1491,
                   0.8276,
                   -0.6552,
                   -7.8526,
                   -5.9127,
                   0.5438,
                   0.6360,
                   -3.9846,
                   -1.0641,
                   -10.0696,
                   1.1477,
                   3.0037,
                   -4.2193,
                   -0.2440};
        states = debug::doubleVec2StateVec(numbers, this->model_);
        belErr2Step = new ParticleBelief(states, false, this->model_, this->rand_, new NoReinvigoration());
    }

    ~IpftSolverTest() override {
        // You can do clean-up work that doesn't throw exceptions here.
    }

    // If the constructor and destructor are not enough for setting up
    // and cleaning up each test, you can define the following methods:

    void SetUp() override {
        // Code here will be called immediately after the constructor (right
        // before each test).
    }

    void TearDown() override {
        // Code here will be called immediately after each test (right
        // before the destructor).
    }

    // Class members declared here can be used by all tests in the test suite
};

// TEST_F(IpftSolverTest, TestErr1ParticleFilterStep8) {
//     State* worldState = this->model_->allocateState();
//     worldState->set(9.2871, 0);
//     Action act = static_cast<Action>(cld::CLDAction::ZERO);
//     Observation* obs = this->model_->observation(*worldState);
//     this->model_->freeState(worldState);
//     LOG(INFO) << "observation: " << *obs;
//     double stateReward = belErr1Step->update(act, *obs);
//     LOG(INFO) << belErr1Step->detailedText();
//     LOG(INFO) << "reward: " << stateReward;
//     delete belErr1Step;
// }

//* Results of julia IPFT (one exemplary round respectively)
// IF action 1 taken
// [ Info: [UCB] [-3 Act]: [UCB1: -5.362977163442629] = [V: -30.950524221577886 (-69.39759599840215|38.44707177682427)] + [ucbT: 25.587547058135257][C:92]
// [ Info: [UCB] [-1 Act]: [UCB1: -4.913023781499213] = [V: -30.50057083963447 (-78.79408451265692|48.29351367302245)] + [ucbT: 25.587547058135257][C:92]
// [ Info: [UCB] [0 Act]: [UCB1: -6.125738863583621] = [V: -76.97444852579879 (-100.0|23.025551474201205)] + [ucbT: 70.84870966221517][C:12]
// [ Info: [UCB] [1 Act]: [UCB1: -4.980325243756798] = [V: -23.073453282494135 (-76.4204620320547|53.347008749560565)] + [ucbT: 18.093128038737337][C:184]
// [ Info: [UCB] [3 Act]: [UCB1: -4.838663971375539] = [V: -47.56204339508372 (-82.67045436776557|35.10841097268185)] + [ucbT: 42.72337942370818][C:33]
// IF action -1 taken
// [ Info: [UCB] [-3 Act]: [UCB1: -7.045679060638424] = [V: -29.62343742902221 (-69.21884795036513|39.59541052134292)] + [ucbT: 22.577758368383787][C:127]
// [ Info: [UCB] [-1 Act]: [UCB1: -0.9924029603134557] = [V: -19.549231571470166 (-71.01825335899031|51.46902178752014)] + [ucbT: 18.55682861115671][C:188]
// [ Info: [UCB] [0 Act]: [UCB1: -6.81535960243319] = [V: -72.51107583189153 (-100.0|27.488924168108465)] + [ucbT: 65.69571622945834][C:15]
// [ Info: [UCB] [1 Act]: [UCB1: -6.903366530566842] = [V: -22.246580246737345 (-76.12335979683704|53.87677955009969)] + [ucbT: 15.343213716170503][C:275]
// [ Info: [UCB] [3 Act]: [UCB1: -6.894436157727014] = [V: -45.69593066368487 (-82.59169495595067|36.8957642922658)] + [ucbT: 38.801494505957855][C:43]
TEST_F(IpftSolverTest, TestErr1SolverSearchStep8) {
    this->solver_ = new Ipft(this->model_, belErr1Step, this->rand_, new BeliefInformationPolicy(this->model_, this->rand_));

    ValuedAction valuedAct = this->solver_->search();
    SearchStatistics* ss = this->solver_->getSearchStatistics();
    LOG(INFO) << ss->text();
    LOG(INFO) << belErr1Step->detailedText();
    LOG(INFO) << valuedAct;
    delete ss;

    // EXPECT_NE(static_cast<int>(cld::CLDAction::NEG3), valuedAct.action_);
    EXPECT_NE(static_cast<int>(cld::CLDAction::ZERO), valuedAct.action_);
    EXPECT_NE(static_cast<int>(cld::CLDAction::POS3), valuedAct.action_);

    //? Result:
    // the solver switches between -1 and 1 action on multiple runs
}

//! In this example c++ implementation performs equal to julia code!
//* Results of julia IPFT (one exemplary round)
// [ Info: [UCB] [-3 Act]: [UCB1: 47.2069704106324] = [V: 38.2247928321901 (28.11229761744563|10.112495214744468)] + [ucbT: 8.982177578442304][C:843]
// [ Info: [UCB] [-1 Act]: [UCB1: 43.433565651862516] = [V: -19.8179539042697 (-43.456906967632825|23.638953063363125)] + [ucbT: 63.251519556132216][C:17]
// [ Info: [UCB] [0 Act]: [UCB1: 45.09829477531684] = [V: -61.369877577360306 (-71.48178467631043|10.11190709895012)] + [ucbT: 106.46817235267714][C:6]
// [ Info: [UCB] [1 Act]: [UCB1: 41.92745259898567] = [V: -17.90249516734541 (-40.6119701352586|22.70947496791319)] + [ucbT: 59.82994776633108][C:19]
// [ Info: [UCB] [3 Act]: [UCB1: 43.55983176119865] = [V: -26.139948083051006 (-56.522833889549844|30.382885806498837)] + [ucbT: 69.69977984424966][C:14]
// [ Info: [SIM] select [-3 Act]
TEST_F(IpftSolverTest, TestEval1txtRound10Step4) {
    std::vector<double> numbers = {3.9433,
                                   3.1378,
                                   0.2911,
                                   -1.6948,
                                   1.1413,
                                   3.2896,
                                   2.1801,
                                   2.9403,
                                   3.0115,
                                   4.5241,
                                   -0.1786,
                                   3.6636,
                                   3.2806,
                                   3.5872,
                                   2.1970,
                                   4.3526,
                                   3.2905,
                                   3.4663,
                                   -3.0771,
                                   2.1328};
    std::vector<State*> states = debug::doubleVec2StateVec(numbers, this->model_);
    ParticleBelief* initBel = new ParticleBelief(states, false, this->model_, this->rand_, new NoReinvigoration());

    this->solver_ = new Ipft(this->model_, initBel, this->rand_, new BeliefInformationPolicy(this->model_, this->rand_));

    ValuedAction valuedAct = this->solver_->search();
    SearchStatistics* ss = this->solver_->getSearchStatistics();
    LOG(INFO) << ss->text();
    LOG(INFO) << valuedAct;
    delete ss;

    // Expect action -3 (corresponds to action index 0)(from julia IPFT)
    EXPECT_EQ(static_cast<int>(cld::CLDAction::NEG3), valuedAct.action_);

    //? Result:
    // on multiple runs the solver always chooses -3
}

//* Results of julia IPFT (one exemplary round)
// [ Info: [UCB] [-3 Act]: [UCB1: 50.93705900385379] = [V: -29.000914474164897 (-27.087096475102317|-1.9138179990625785)] + [ucbT: 79.93797347801869][C:11]
// [ Info: [UCB] [-1 Act]: [UCB1: 53.39682830292425] = [V: -26.541145175094442 (-24.635740197761624|-1.9054049773328186)] + [ucbT: 79.93797347801869][C:11]
// [ Info: [UCB] [0 Act]: [UCB1: 53.439197496392936] = [V: 45.43812313538836 (45.6177156909735|-0.1795925555851369)] + [ucbT: 8.001074361004576][C:1098]
// [ Info: [UCB] [1 Act]: [UCB1: 43.63427478417502] = [V: -74.93290080966007 (-77.87741675175168|2.944515942091611)] + [ucbT: 118.56717559383509][C:5]
// [ Info: [UCB] [3 Act]: [UCB1: 41.38137882637069] = [V: -91.18075343761394 (-93.1975|2.0167465623860616)] + [ucbT: 132.56213226398464][C:4]
// If the c++ implementation also takes action 0, the action values on treelevel 0 are comparable
TEST_F(IpftSolverTest, TestAction0TakenWrong) {
    std::vector<double> numbers = {
        1.3683,
        0.7596,
        1.7421,
        1.0755,
        1.2364,
        1.4864,
        1.3303,
        0.0859,
        1.8493,
        2.2353,
        0.8299,
        1.2075,
        1.8157,
        1.8321,
        0.2949,
        1.4529,
        1.2495,
        1.1323,
        1.2289,
        1.4052};

    std::vector<State*> states = debug::doubleVec2StateVec(numbers, this->model_);
    ParticleBelief* initBel = new ParticleBelief(states, false, this->model_, this->rand_, new NoReinvigoration());

    this->solver_ = new Ipft(this->model_, initBel, this->rand_, new BeliefInformationPolicy(this->model_, this->rand_));

    ValuedAction valuedAct = this->solver_->search();
    SearchStatistics* ss = this->solver_->getSearchStatistics();
    LOG(INFO) << initBel->detailedText();
    LOG(INFO) << ss->text();
    LOG(INFO) << valuedAct;
    delete ss;

    // Expect action 0 (corresponds to action index 2) or -1 (action index 1) (from julia IPFT)
    EXPECT_NE(static_cast<int>(cld::CLDAction::NEG3), valuedAct.action_);
    EXPECT_NE(static_cast<int>(cld::CLDAction::POS1), valuedAct.action_);
    EXPECT_NE(static_cast<int>(cld::CLDAction::POS3), valuedAct.action_);

    //? Result:
    // on multiple runs action -1 (which is actually the correct one, from looking at the particles) is taken slightly more often than action 0
}

TEST_F(IpftSolverTest, TestAction0TakenWrong2) {
    std::vector<double> numbers = {
        1.4425,
        1.5852,
        1.9032,
        1.8196,
        1.8616,
        1.8537,
        1.7485,
        1.6102,
        1.8931,
        1.9599,
        1.9109,
        1.7296,
        1.8705,
        2.0431,
        2.0328,
        2.7581,
        2.1169,
        2.3510,
        2.3208,
        0.8996,
        2.0679,
        2.3922,
        2.1796,
        1.7568,
        1.9927,
        2.0215,
        1.8718,
        2.3271,
        2.3944,
        1.6637,
        1.9388,
        1.4980,
        1.9690,
        1.6293,
        1.5286,
        1.5286,
        1.5315,
        1.7956,
        2.1122,
        2.2659,
        2.0035,
        2.1602,
        1.9260,
        2.0459,
        1.8467,
        1.5675,
        1.6762,
        2.2668,
        1.5352,
        1.4087,
        1.9547,
        2.0430,
        1.5008,
        1.5662,
        2.1439,
        1.8095,
        1.9401,
        1.4614,
        1.1965,
        1.1999,
        1.4812,
        1.5529,
        1.6101,
        1.4833,
        2.0914,
        1.4582,
        1.1397,
        1.5724,
        1.7297,
        2.1042,
        2.0929,
        2.0189,
        2.0928,
        1.0278,
        1.4194,
        1.1766,
        1.5550,
        1.6851,
        1.6413,
        1.1325,
        0.7572,
        0.7572,
        0.7410,
        1.3497,
        0.8312,
        1.1883,
        1.3484,
        1.2839,
        1.8207,
        1.3449,
        1.2589,
        1.2589,
        1.2857,
        1.2857,
        1.4393,
        1.2124,
        1.6772,
        1.5038,
        1.8464,
        1.5138,
        1.2035,
        1.0195,
        1.2702,
        1.4647,
        1.6523,
        1.1744,
        1.2934,
        1.1490,
        1.1490,
        1.1428,
        1.4826,
        1.4189,
        1.4574,
        1.6672,
        1.3440,
        1.4074,
        1.3003,
        1.5619,
        1.5182,
        1.5882,
        1.2246,
        1.3478,
        1.4964,
        1.2189,
        1.5661,
        1.3949,
        1.3949,
        1.2709,
        1.5267,
        1.7648,
        1.4060,
        1.4935,
        1.2284,
        1.3449,
        1.4285,
        1.3414,
        1.6950,
        1.1613,
        1.2534,
        1.6310,
        1.5389,
        1.5541,
        1.7740,
        1.7994,
        1.3353,
        1.4962,
        1.5509,
        1.3944,
        1.4486,
        1.4486,
        1.4561,
        1.4633,
        1.5752,
        0.8608,
        1.2691,
        1.1484,
        0.9258,
        1.9246,
        1.5456,
        1.3068,
        0.2298,
        0.2298,
        0.1429,
        0.7635,
        1.0813,
        0.8464,
        0.8464,
        1.5240,
        1.2032,
        1.2090,
        1.3352,
        1.1103,
        1.2717,
        1.0790,
        1.2959,
        0.3551,
        0.3551,
        0.7623,
        1.5887,
        1.7256,
        2.1694,
        1.6252,
        1.6135,
        1.9385,
        2.0520,
        2.0610,
        2.1662,
        2.3264,
        2.1805,
        2.1249,
        1.6725,
        1.8894,
        2.6148,
        1.7454,
        1.6621,
        1.6804,
        1.8820,
        1.9539,
        2.0996,
        1.5684,
        1.8320,
        1.5956,
        1.7592,
        2.0055,
        2.0006,
        1.9799,
        2.1038,
        0.6583,
        0.8721,
        1.0559,
        0.7655,
        0.7655,
        0.8058,
        0.8024,
        0.8476,
        1.0128,
        1.1889,
        1.1889,
        1.2135,
        0.8890,
        1.0576,
        2.1130,
        2.3678,
        2.0537,
        1.4100,
        2.1308,
        1.8717,
        2.3550,
        2.0085,
        2.2313,
        2.1071,
        2.1205,
        2.1001,
        1.7546,
        1.9180,
        1.7775,
        1.7317,
        1.9525,
        1.7728,
        1.9745,
        2.4148,
        1.2247,
        1.2247,
        0.9438,
        0.9463,
        2.1866,
        2.0021,
        2.0070,
        1.8669,
        2.0899,
        1.9736,
        1.9608,
        1.9738,
        1.6733,
        1.5615,
        1.5919,
        1.8876,
        1.6581,
        1.5125,
        1.7442,
        1.5507,
        1.6169,
        1.6549,
        1.2654,
        1.4565,
        1.7967,
        1.5465,
        1.2381,
        1.5754,
        2.0227,
        1.7956,
        1.6261,
        0.9308,
        0.9849,
        1.5423,
        1.3802,
        1.2288,
        1.6382,
        1.3093,
        1.3093,
        0.7935,
        1.3541,
        1.0254,
        1.1045,
        0.8340,
        1.2193,
        1.4008,
        1.4008,
        0.5361,
        1.5810,
        0.3736,
        0.6131,
        1.2927,
        0.6653,
        0.6653,
        1.3634,
        1.1541,
        1.5512,
        1.2838,
        1.3552,
        1.6729,
        1.4449,
        1.4961,
        1.2139,
        1.4206,
        1.3396,
        1.3168,
        1.3168,
        1.0224,
        0.9775,
        1.2457,
        1.4681,
        1.1257,
        1.1368,
        1.0949,
        1.3785,
        1.3785,
        1.2809,
        1.4436,
        1.1751,
        1.8788,
        1.9838,
        1.7077,
        2.0876,
        1.3244,
        1.3278,
        1.1099,
        1.1099,
        1.5944,
        1.7825,
        1.6977,
        1.9571,
        1.8654,
        1.9301,
        1.6020,
        1.3569,
        1.2699,
        1.0104,
        1.0104,
        1.4194,
        1.2431,
        0.9353,
        1.5110,
        1.2420,
        1.3026,
        1.3680,
        1.6837,
        1.5035,
        1.2233,
        1.2367,
        1.2558,
        1.2558,
        1.2414,
        1.2940,
        1.2394,
        1.2854,
        2.3226,
        2.4366,
        1.5860,
        1.6687,
        1.7395,
        1.8324,
        1.8093,
        1.5998,
        1.7799,
        1.8558,
        2.0017,
        1.9060,
        1.7638,
        1.9554,
        1.5260,
        1.7521,
        1.9087,
        1.5389,
        1.4020,
        1.4104,
        1.6195,
        1.7266,
        1.9556,
        1.7008,
        1.7510,
        1.9982,
        0.2198,
        1.4255,
        1.3332,
        1.1967,
        1.2781,
        1.0683,
        1.0683,
        1.3355,
        1.1094,
        1.6580,
        1.4660,
        1.4107,
        1.1407,
        1.2128,
        1.4697,
        1.4059,
        1.5589,
        1.5117,
        1.2563,
        1.8170,
        1.5283,
        1.1045,
        1.1045,
        1.0753,
        1.7368,
        0.9514,
        1.2789,
        1.4678,
        1.6022,
        1.0687,
        1.1012,
        1.1847,
        1.5225,
        1.5670,
        1.4717,
        1.4717,
        1.6993,
        2.0653,
        1.7810,
        0.9581,
        1.5619,
        1.0778,
        1.0778,
        1.4114,
        1.3199,
        1.0111,
        1.1655,
        1.2234,
        1.1345,
        1.4467,
        1.1866,
        1.0865,
        1.0865,
        0.0571,
        2.3464,
        1.9173,
        2.0282,
        1.7147,
        2.0400,
        2.2119,
        2.3653,
        0.8371,
        1.2372,
        0.8659,
        1.1378,
        1.4534,
        1.4534,
        1.4787,
        1.4055,
        1.6076,
        1.6176,
        1.0008,
        1.4724,
        1.0608,
        0.8791,
        2.6205,
        2.2806,
        2.1114,
        2.2793,
        1.8066,
        2.1673,
        2.5926,
        2.1057,
        2.4805,
        2.5589,
        1.1178,
        1.3568,
        1.1848,
        0.6324,
        1.0569,
        1.0569,
        0.5998,
        1.2937,
        1.0765,
        1.4245,
        1.0155,
        1.3021,
        1.6850,
        1.7098,
        1.2043,
        1.3770,
        1.1664,
        1.1664,
        1.2680,
        1.2987,
        1.1920,
        1.2664,
        1.1895,
        1.3556,
        1.2238,
        1.3538,
        1.4790,
        1.3678,
        1.3678,
        1.0057,
        0.8460,
        0.7454,
        1.3581,
        1.6648,
        1.6239,
        1.8166,
        1.6806,
        1.5798,
        1.5790,
        0.2677,
        2.4108,
        2.3321,
        2.2713,
        2.1242,
        2.5546,
        0.8229,
        0.5216,
        0.5216,
        0.8105,
        1.7218,
        1.4493,
        1.2612,
        1.4702,
        1.3506,
        1.5030,
        1.5960,
        1.5237,
        1.2378,
        1.5559,
        1.4197,
        1.5821,
        1.5187,
        1.1698,
        1.1698,
        0.9529,
        1.1575,
        1.1984,
        1.0545,
        1.4801,
        0.8634,
        1.4110,
        1.4249,
        1.3896,
        1.3896,
        1.4118,
        1.1414,
        1.4321,
        1.2764,
        1.1635,
        0.9945,
        0.9423,
        1.2963,
        1.2645,
        1.2645,
        1.2575,
        1.6493,
        1.1289,
        1.4659,
        1.4831,
        1.2542,
        1.1834,
        0.9726,
        1.4484,
        1.6849,
        1.3353,
        1.2451,
        1.2451,
        1.1414,
        1.1347,
        1.7971,
        1.7489,
        1.6046,
        1.2800,
        2.6185,
        2.0633,
        1.9624,
        1.9958,
        2.1114,
        1.7604,
        2.5024,
        2.0882,
        2.1701,
        1.9218,
        2.3495,
        2.4567,
        1.7166,
        2.5750,
        2.3814,
        2.2409,
        2.2114,
        2.8815,
        2.3648,
        0.9856,
        1.1305,
        1.7204,
        1.5792,
        1.6545,
        1.4165,
        1.6077,
        1.7144,
        1.5917,
        1.4968,
        1.3464,
        1.7011,
        1.8610,
        1.9262,
        1.2710,
        1.2308,
        1.4584,
        1.4193,
        1.2309,
        1.8204,
        1.8580,
        1.9398,
        1.8026,
        1.8575,
        1.9986,
        1.7492,
        1.7522,
        1.7730,
        2.0207,
        2.0185,
        2.7406,
        1.9110,
        2.0217,
        1.8871,
        1.5571,
        1.9552,
        1.7631,
        1.6889,
        1.6049,
        2.0297,
        1.8143,
        1.6340,
        1.4301,
        1.5346,
        1.9999,
        1.8494,
        1.6088,
        1.8558,
        1.5884,
        1.7560,
        1.8510,
        1.6042,
        2.0137,
        2.2281,
        1.9308,
        2.0252,
        2.2161,
        2.7276,
        2.5657,
        1.9200,
        2.4375,
        1.9360,
        2.1369,
        2.0852,
        2.4410,
        1.0060,
        1.6904,
        1.3896,
        1.4341,
        1.4240,
        1.5084,
        1.2382,
        1.4796,
        1.4146,
        1.2276,
        1.1352,
        1.4740,
        1.3422,
        1.7176,
        1.1421,
        1.1421,
        1.5623,
        1.5152,
        1.6305,
        1.6540,
        1.3945,
        1.5851,
        1.6150,
        1.6498,
        1.3416,
        1.0603,
        0.7969,
        1.3238,
        0.9351,
        2.1247,
        1.7362,
        1.3026,
        1.6116,
        1.7275,
        1.9846,
        1.7856,
        1.8963,
        2.4425,
        1.1887,
        1.4927,
        1.6907,
        1.2968,
        1.7381,
        1.7067,
        1.6537,
        1.5228,
        1.8126,
        1.6831,
        2.1106,
        1.3013,
        1.4916,
        1.4420,
        1.3497,
        1.7429,
        1.5051,
        2.3492,
        2.2015,
        2.2999,
        2.0800,
        2.3387,
        1.8269,
        1.9958,
        2.2079,
        2.3159,
        2.2134,
        2.2152,
        2.1264,
        2.0009,
        1.9135,
        2.2189,
        2.0858,
        2.4467,
        2.2345,
        1.6345,
        1.7319,
        1.6308,
        1.6887,
        2.2193,
        1.8426,
        1.5264,
        2.1692,
        0.2558,
        0.2558,
        1.0353,
        2.0530,
        1.9128,
        2.3833,
        2.1950,
        2.3924,
        2.2131,
        2.1600,
        2.5378,
        2.5565,
        2.3056,
        2.1747,
        2.3090,
        1.9695,
        2.3131,
        2.3514,
        0.8910,
        1.8271,
        2.0000,
        1.7813,
        1.6763,
        1.4943,
        1.4420,
        1.7400,
        1.7038,
        1.6471,
        1.7653,
        1.7594,
        1.9518,
        1.6503,
        1.6803,
        1.7211,
        1.7819,
        1.7048,
        1.5378,
        1.7910,
        1.9502,
        1.5313,
        1.8146,
        1.5747,
        1.5259,
        1.7078,
        1.8003,
        1.9664,
        2.1347,
        1.6313,
        1.6241,
        2.3979,
        2.0145,
        1.2996,
        1.9420,
        1.5894,
        1.7857,
        1.7224,
        1.7733,
        2.0524,
        1.4584,
        0.9095,
        0.7626,
        1.1199,
        1.1292,
        1.4386,
        0.8063,
        0.8063,
        1.3447,
        1.7317,
        1.3626,
        1.2075,
        1.6444,
        1.2582,
        0.9945,
        1.2333,
        1.5738,
        1.2800,
        1.1190,
        1.9955,
        1.0164,
        1.0164,
        1.0696,
        1.0854,
        1.4540,
        1.1507,
        1.6256,
        0.9630,
        1.0498,
        1.0742,
        0.7678,
        0.7678,
        0.9732,
        1.2422,
        0.9783,
        2.1871,
        2.0540,
        2.1867,
        2.0816,
        2.4387,
        2.7382,
        1.5870,
        1.4543,
        2.1755,
        1.5047,
        0.6992,
        0.6992,
        1.1194,
        0.8922,
        0.5879,
        0.4905,
        0.4905,
        0.9092,
        2.8303,
        2.5994,
        2.4551,
        1.8527,
        2.1186,
        1.8378,
        1.8108,
        1.7618,
        1.8644,
        1.7001,
        1.6840,
        1.9076,
        2.0452,
        1.9523,
        1.7976,
        1.9418,
        1.0998,
        1.2645,
        1.3794,
        0.7458,
        1.2215,
        0.9757,
        0.9175,
        0.9175,
        1.7494,
        1.7575,
        1.8296,
        1.6824,
        1.6440,
        1.4066,
        0.9088,
        0.9088,
        1.4123,
        1.5847,
        1.4749,
        2.1940,
        1.7026,
        1.5986,
        1.7278,
        1.6415,
        2.1150,
        1.8317,
        1.8001,
        1.6789,
        2.4323,
        2.2341,
        2.3406,
        1.7991,
        1.9536,
        1.6720,
        2.4203,
        1.7485,
        0.2749,
        1.9790,
        2.2324,
        1.7695,
        1.8928,
        1.6592,
        1.8547,
        1.7881,
        1.5954,
        1.3699,
        1.4674,
        1.6660,
        1.7271,
        1.2825,
        1.1800,
        1.4121,
        1.5326,
        1.8074,
        1.9647,
        1.5767,
        1.7325,
        2.1012,
        2.1170,
        1.7840,
        1.6837,
        1.4102,
        1.3959,
        1.5888,
        1.6322,
        2.0404,
        0.2543,
        0.5844,
        2.3713,
        1.9493,
        2.1374,
        2.3038,
        2.1260,
        2.1781,
        1.9865,
        2.2826,
        2.2339,
        1.8753,
        0.9086,
        1.2671,
        1.1803,
        0.8389,
        1.2935,
        1.2934,
        1.2934,
        1.2252,
        0.9608,
        1.1728,
        1.3484,
        1.1411,
        1.3781,
        1.0502,
        0.2293,
        0.2293,
        0.8965,
        1.1252,
        1.2181,
        0.9282,
        1.0971,
        1.2279,
        1.2279,
        1.3289,
        2.0270,
        2.0343,
        2.1019,
        1.7164,
        2.0063,
        2.0873,
        1.9227,
        1.8038,
        2.1047,
        1.7928,
        2.0286,
        2.1750,
        1.7136,
        2.2754,
        2.6323,
        1.8872,
        1.8334,
        1.8261,
        2.2144,
        2.3843,
        2.0373,
        0.4766,
        0.0098,
        0.0098,
        1.9001,
        2.4113,
        2.5252,
        1.9864,
        2.3459,
        2.3054,
        2.4234,
        0.0590,
        1.6700,
        1.8291,
        1.4475,
        1.6103,
        1.4357,
        1.9578,
        1.7874,
        1.4063,
        1.5304,
        1.5394,
        2.1417,
        1.8440,
        1.9434,
        2.1740,
        2.0543,
        2.1871,
        2.2504,
        2.0818,
        2.1903,
        1.9363,
        1.5549,
        1.5059,
        1.2173,
        1.7245,
        1.6871,
        1.9195,
        1.9686,
        1.6154,
        1.4839,
        1.9583,
        1.7154,
        2.1909,
        2.0755,
        1.6190,
        1.2779};
    std::vector<State*> states = debug::doubleVec2StateVec(numbers, this->model_);
    ParticleBelief* initBel = new ParticleBelief(states, false, this->model_, this->rand_, new NoReinvigoration());

    this->solver_ = new Ipft(this->model_, initBel, this->rand_, new BeliefInformationPolicy(this->model_, this->rand_));

    ValuedAction valuedAct = this->solver_->search();
    SearchStatistics* ss = this->solver_->getSearchStatistics();
    LOG(INFO) << initBel->text();
    LOG(INFO) << ss->text();
    LOG(INFO) << valuedAct;
    delete ss;

    EXPECT_EQ(static_cast<int>(cld::CLDAction::NEG1), valuedAct.action_);
}

}  // namespace test
}  // namespace ipft

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    // INIT GLOG
    google::InitGoogleLogging(argv[0]);
    google::InstallFailureSignalHandler();
    // ::testing::InitGoogleTest(&argc, argv);

    FLAGS_colorlogtostderr = true;
    FLAGS_logtostderr = true;
    return RUN_ALL_TESTS();
}